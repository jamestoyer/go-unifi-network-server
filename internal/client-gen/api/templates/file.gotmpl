// Code generated from Unifi Network Server API definitions.
// DO NOT EDIT.

{{ template "licence.gotmpl" }}
package {{ .PackageName }}

import (
    "context"
    "encoding/json"
	"errors"
    "fmt"
    "net/http"
	"path"
)

{{ range $struct := .Objects }}
{{ template "struct.gotmpl" $struct }}
{{ end }}


type responseBody{{ .Name }} struct {
    Metadata json.RawMessage `json:"meta"`
	Payload  []{{ .Name }}   `json:"data"`
}

func (c *Client) Create{{ .Name }}(ctx context.Context, data *{{ .Name }}) (*{{ .Name }}, *http.Response, error) {
    req, err := c.NewRequest(ctx, http.MethodPost, c.ResourceAPIPath("{{ .ResourcePath }}"), data)
    if err != nil {
        return nil, nil, err
    }

    var body responseBody{{ .Name }}
    resp, err := c.Do(ctx, req, &body)
    if err != nil {
        return nil, resp, fmt.Errorf(`unable to create {{ .Name }}: %w`, err)
    }

    var item *{{ .Name }}
    switch len(body.Payload) {
    case 0:
        err = errors.New(`failed to create {{ .Name }}`)
    case 1:
        item = &body.Payload[0]
    default:
        err = fmt.Errorf("unexpected number of results: %v", len(body.Payload))
    }

    return item, resp, err
}

func (c *Client) Delete{{ .Name }}(ctx context.Context, id string) (*http.Response, error) {
    endpointPath:= path.Join(c.ResourceAPIPath("{{ .ResourcePath }}"), id)
    req, err := c.NewRequest(ctx, http.MethodDelete, endpointPath, nil)
    if err != nil {
        return nil, err
    }

    var body responseBody{{ .Name }}
    resp, err := c.Do(ctx, req, &body)
    if err != nil {
        return  resp, fmt.Errorf(`unable to delete {{ .Name }}: %w`, err)
    }

    return resp, nil
}

func (c *Client) Get{{ .Name }}(ctx context.Context, id string) (*{{ .Name }}, *http.Response, error) {
	endpointPath:= path.Join(c.ResourceAPIPath("{{ .ResourcePath }}"), id)
    req, err := c.NewRequest(ctx, http.MethodGet, endpointPath, nil)
    if err != nil {
        return nil, nil, err
    }

	var body responseBody{{ .Name }}
    resp, err := c.Do(ctx, req, &body)
    if err != nil {
		return nil, resp, fmt.Errorf(`unable to get {{ .Name }}: %w`, err)
    }

	var item *{{ .Name }}
	switch len(body.Payload) {
	case 0:
    case 1:
		item = &body.Payload[0]
    default:
		err = fmt.Errorf("unexpected number of results: %v", len(body.Payload))
    }

	return item, resp, err
}

func (c *Client) List{{ .Name }}(ctx context.Context) ([]{{ .Name }}, *http.Response, error) {
    req, err := c.NewRequest(ctx, http.MethodGet, c.ResourceAPIPath("{{ .ResourcePath }}"), nil)
    if err != nil {
        return nil, nil, err
    }

    var body responseBody{{ .Name }}
    resp, err := c.Do(ctx, req, &body)
    if err != nil {
        return nil, resp, fmt.Errorf(`unable to get {{ .Name }}: %w`, err)
    }

    return body.Payload, resp, nil
}

func (c *Client) Update{{ .Name }}(ctx context.Context, data *{{ .Name }}) (*{{ .Name }}, *http.Response, error) {
    endpointPath:= path.Join(c.ResourceAPIPath("{{ .ResourcePath }}"), data.GetID())
    req, err := c.NewRequest(ctx, http.MethodPut, endpointPath, data)
    if err != nil {
        return nil, nil, err
    }

    var body responseBody{{ .Name }}
    resp, err := c.Do(ctx, req, &body)
    if err != nil {
        return nil, resp, fmt.Errorf(`unable to update {{ .Name }}: %w`, err)
    }

    var item *{{ .Name }}
    switch len(body.Payload) {
    case 0:
        err = errors.New(`failed to update {{ .Name }}`)
    case 1:
        item = &body.Payload[0]
    default:
        err = fmt.Errorf("unexpected number of results: %v", len(body.Payload))
    }

    return item, resp, err
}